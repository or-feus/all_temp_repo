// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
	id        Int      @id @default(autoincrement())
	name      String
	phone     String?     @unique
	email     String?  @unique
	avatar    String?
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	tokens    Token[]
	products  Product[]
	favorite  Favorite[]
	stream    Stream[]
	message   Message[]
}

model Token {
	id        Int         @id @default(autoincrement())
	payload   String      @unique
	user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
	userId    Int
	createdAt DateTime    @default(now())
	updatedAt DateTime    @updatedAt
}


model Product {
	id          Int         @id @default(autoincrement())
	user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
	userId      Int
	image       String
	name        String
	price       Int
	description String      @db.MediumText
	createdAt   DateTime    @default(now())
	updatedAt   DateTime    @updatedAt
	favorite    Favorite[]
}

model Favorite {
	id          Int         @id @default(autoincrement())

	user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
	userId      Int
	product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
	productId   Int
	createdAt   DateTime    @default(now())
	updatedAt   DateTime    @updatedAt

}


model Stream {
	id          Int         @id @default(autoincrement())
	name        String
	description String      @db.MediumText
	price       Int
	user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
	userId      Int
	createdAt   DateTime    @default(now())
	updatedAt   DateTime    @updatedAt
	message     Message[]
}


model Message {
	id          Int         @id @default(autoincrement())
	createdAt   DateTime    @default(now())
	updatedAt   DateTime    @updatedAt
	user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  message     String      @db.MediumText
	stream      Stream      @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId    Int
}